# Specify the trigger event to start the build pipeline.
# In this case, new code merged into the release branch initiates a new build.
trigger:
- release

# Specify the operating system for the Azure virtual machine running the build pipeline.
# This uses a Windows-based agent.
pool:
  name: Default

# Download the files from the designated branch in the remote Git repository
# onto the build agent.
steps:
- checkout: self
  persistCredentials: true
  clean: true

# Gather new or updated files for deployment.
# Use PowerShell to replace the Linux-specific `cp` commands with equivalent Windows commands.
- powershell: |
    # Check if the repository has at least one commit
    if (git rev-parse --verify HEAD) {
        # Repository has commits; diff from the last commit
        git diff --name-only --diff-filter=AMR HEAD^ HEAD | ForEach-Object { 
            $sourcePath = Join-Path "$(Build.Repository.LocalPath)" $_
            $destPath = Join-Path "$(Build.BinariesDirectory)" $_
            New-Item -ItemType Directory -Path (Split-Path $destPath) -Force | Out-Null
            Copy-Item -Path $sourcePath -Destination $destPath -Recurse -Force
        }
    } else {
        # No commits; copy all files
        Get-ChildItem -Recurse "$(Build.Repository.LocalPath)" | ForEach-Object {
            $sourcePath = $_.FullName
            $destPath = $sourcePath -replace [regex]::Escape("$(Build.Repository.LocalPath)"), "$(Build.BinariesDirectory)"
            New-Item -ItemType Directory -Path (Split-Path $destPath) -Force | Out-Null
            Copy-Item -Path $sourcePath -Destination $destPath -Recurse -Force
        }
    }

    # Create additional directories and copy necessary files
    New-Item -ItemType Directory -Path "$(Build.BinariesDirectory)\Libraries\python\dabdemo\dabdemo" -Force | Out-Null
    Copy-Item -Path "$(Build.Repository.LocalPath)\Libraries\python\dabdemo\dabdemo\*.*" -Destination "$(Build.BinariesDirectory)\Libraries\python\dabdemo\dabdemo" -Recurse -Force
    Copy-Item -Path "$(Build.Repository.LocalPath)\Libraries\python\dabdemo\setup.py" -Destination "$(Build.BinariesDirectory)\Libraries\python\dabdemo" -Force
    Copy-Item -Path "$(Build.Repository.LocalPath)\*.*" -Destination "$(Build.BinariesDirectory)" -Force
  displayName: 'Get Changes'

# Create the deployment artifact and publish it.
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    ArtifactName: 'DatabricksBuild'
